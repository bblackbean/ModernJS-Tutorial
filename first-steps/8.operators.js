// 기본 연산자와 수학

// 용어: ‘단항’, ‘이항’, ‘피연산자’
// 피연산자(operand) 는 연산자가 연산을 수행하는 대상이다. 5 * 2에는 왼쪽 피연산자 5와 오른쪽 피연산자 2, 총 두 개의 피연산자가 있다. '피연산자’는 '인수(argument)'라는 용어로 불리기도 한다.
// 피연산자를 하나만 받는 연산자는 단항(unary) 연산자 라고 부른다. 피연산자의 부호를 뒤집는 단항 마이너스 연산자 -는 단항 연산자의 대표적인 예이다.
let x = 1;

x = -x;
alert( x ); // -1, 단항 마이너스 연산자는 부호를 뒤집는다.

// 두 개의 피연산자를 받는 연산자는 이항(binary) 연산자 라고 부른다. 마이너스 연산자는 아래와 같이 이항 연산자로 쓸 수도 있다.
let x1 = 1, y = 3;
alert( y - x1 ); // 2, 이항 마이너스 연산자는 뺄셈을 해준다.
// 위와 같이 부호를 반전해주는 단항 마이너스 연산자와 뺄셈에 쓰이는 이항 마이너스 연산자(뺄셈 연산자)는 기호는 같지만 수행하는 연산이 다르다. 두 연산을 구분하는 기준은 피연산자의 개수이다.


/* 수학
자바스크립트에서 지원하는 수학 연산자는 다음과 같다.
덧셈 연산자 +,
뺄셈 연산자 -,
곱셈 연산자 *,
나눗셈 연산자 /,
나머지 연산자 %,
거듭제곱 연산자 **
*/

/* 나머지 연산자 %
나머지 연산자(remainder operator)는 % 기호로 나타내지만, 비율을 나타내는 퍼센트와 관련이 없다.
나머지 연산자를 사용한 표현식 a % b는 a를 b로 나눈 후 그 나머지(remainder)를 정수로 반환한다.
*/
alert(5 % 2); // 5를 2로 나눈 후의 나머지인 1을 출력
alert(9 % 3); // 8을 3으로 나눈 후의 나머지인 2를 출력


/* 거듭제곱 연산자 **
거듭제곱 연산자(exponentiation operator)를 사용한 a ** b 를 평가하면 a 를 b 번 곱한 값이 반환됩니다.
*/
alert(2 ** 2); // 4 (2 * 2)
alert(2 ** 3); // 8 (2 * 2 * 2)
alert(2 ** 4); // 16 (2 * 2 * 2 * 2)

// 거듭제곱 연산자는 정수가 아닌 숫자에 대해서도 동작한다. 1/2을 사용하면 제곱근을 구할 수 있다.
alert( 4 ** (1/2) ); // 2 (1/2 거듭제곱은 제곱근)
alert( 8 ** (1/3) ); // 2 (1/3 거듭제곱은 세제곱근)


/* 이항 연산자 '+' 와 문자열 연결 
덧셈 연산자 + 는 대개 숫자를 더한 결과를 반환한다.
그런데 이항 연산자 + 는 피연산자로 문자열이 전달되면 덧셈 연산자는 덧셈이 아닌 문자열을 병합(연결)한다.
*/
let s = "my" + "string";
alert(s); //mystring
// 따라서 이항 연산자 + 를 사용할 때는 피연산자 중 하나가 문자열이면 다른 하나도 문자열로 변환된다는 점에 주의해야 한다.
alert('1'+2); // "12"
alert(2+'1'); // "21"
alert(2+2+'1'); // '221'이 아니라 '41'이 출력됨

// + 외의 다른 산술 연산자는 오직 숫자형의 피연산자만 다루고, 피연산자가 숫자형이 아닌 경우에 그 형을 숫자형으로 바꾼다.
alert(6 - '2'); // 4, '2'를 숫자로 바꾼 후 연산이 진행됨
alert('6' / '2'); // 3, 두 피연산자가 숫자로 바뀐 후 연산이 진행됨


/* 단항 연산자 +와 숫자형으로의 변환 
덧셈 연산자 +는 이항 연산자뿐만 아니라 단항 연산자로도 사용할 수 있다.
숫자에 단항 덧셈 연산자를 붙이면 이 연산자는 아무런 동작도 하지 않는다. 그러나 피연산자가 숫자가 아닌 경우, 숫자형으로의 변환이 일어난다.
*/
// 숫자에는 아무런 영향을 미치지 않는다.
let xx = 1;
alert(+xx); // 1

let yy = -2;
alert(+y); // -2

// 숫자형이 아닌 피연산자는 숫자형으로 변화한다.
alert(+true); // 1
alert(+""); // 0

/* 단항 덧셈 연산자는 짧은 문법으로도 Number(...)와 동일한 일을 할 수 있다.
개발을 하다 보면 문자열을 숫자로 변환해야 하는 경우가 자주 생긴다. HTML 폼(form) 필드에서 값을 가져왔는데 그 값이 문자형일 때 같이 말이다. 실제로 폼에서 가지고 온 값은 대개 문자열 형태이다.
이항 덧셈 연산자를 사용하면 아래와 같이 값이 문자열로 변해서 연결된다.*/
let apples = "2";
let oranges = "3";
alert(apples + oranges); // 23, 이항 덧셈 연산자는 문자열을 연결한다.

// 원하는 대로 값을 더해주려면, 단항 덧셈 연산자를 사용해 피연산자를 숫자형으로 변화시킨다.
let apples1 = '2';
let oranges1 = '3';
// 이항 덧셈 연산자가 적용되기 전에, 두 피연산자는 숫자형으로 변화한다.
alert(+apples1 + +oranges1); // 5

// 'Number(...)'를 사용해서 같은 동작을 하는 코드를 작성할 수 있지만, 더 길다.
// alert( Number(apples) + Number(oranges) ); // 5


/* 할당 연산자
무언가를 할당할 때 쓰이는 = 도 연산자이다. 이 연산자는 할당(assignment) 연산자라고 불리는데, 우선순위는 3으로 아주 낮다.
x = 2 * 2 + 1; 과 같은 표현식에서 계산이 먼저 이루어지고, 그 결과가 x 에 할당되는 이유가 바로 이 때문이다.

* 값을 반환하는 할당 연산자
자바스크립트에서 대부분의 연산자들은 값을 반환한다. + 와 - 뿐만 아니라 = 역시 값을 반환한다.
x = value 를 호출하면 value 가 x 에 쓰여지고, 이에 더하여 value 가 반환된다.
*/

let a = 1;
let b = 2;

let c = 3 - (a = b + 1);

alert(a); // 3
alert(c); // 0
// 직접 코드를 작성할 땐 이런 방식은 지양하는 것이 좋다. 이런 트릭을 사용하면 코드가 명확하지도 않을 뿐더러 가독성도 떨어진다.

// 할당 연산자 체이닝
let d, e, f;
d = e = f = 2+2;
alert(d); // 4
alert(e); // 4
alert(f); // 4
// 이렇게 할당 연산자를 여러 개 연결한 경우, 평가는 우측부터 진행된다. 먼저 가장 우측의 2+2가 평가되고, 그 결과가 좌측의 f, e, d 에 순차적으로 할당된다. 모든 변수가 단일 값을 공유하게 된다. 하지만 가독성을 위해 가급적 줄을 나눠서 코드를 작성하는 것이 좋다.
f = 2+2;
e = f;
d = f;


// 복합 할당 연산자
let n = 2;
n = n + 5;
n = n * 2;
// 프로그램을 짜다 보면, 변수에 연산자를 적용하고 그 결과를 같은 변수에 저장해야 하는 경우가 생긴다. 이때, += 와 *= 연산자를 사용하면 짧은 문법으로 동일한 연산을 수행할 수 있다.
let n1 = 2;
n1 += 5; // n1은 7 (n = n + 5 와 동일)
n1 *= 2; // n1은 14 (n = n * 2 와 동일)
alert(n1); // 14

// 이런 '복합 할당' 연산자는 산술 연산자와 비트 연산자에도 적용할 수 있다. /= , -= 등의 연산자를 만들 수 있다.
// 복합 할당 연산자의 우선순위는 할당 연산자와 동일하다. 따라서 대부분 다른 연산자가 실행된 후에 복합 할당 연산자가 실행된다.
let n2 = 2;
n2 *= 3+5;
alert(n2); // 16 (*=의 우측이 먼저 평가되므로, 위 식은 n *= 8과 동일하다.)